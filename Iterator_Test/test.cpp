#include "pch.h"
#include "doubly_linked_list.h"

namespace IteratorTest {

//======================//
//    　 Iterator       //
//======================//


//================================ イテレータの指す要素を取得する ============================

//  ID: 0
//  テスト項目: リストの参照がない状態で呼び出した際の挙動
//  想定する戻り値: NULL
	TEST(GetIteratorTest, TestGetIteratorWhenNoListRef) {
		DoublyLinkedList list;

		DoublyLinkedList::Iterator it;

		EXPECT_FALSE(it.getRecord());
	}

	//  ID: 1
	//  テスト項目: Iteratorから取得した要素に対して、値の代入が行えるかをチェック
	//  想定する戻り値: 
	TEST(GetIteratorTest, TestGetIteratorAndPushValue) {
		DoublyLinkedList list;
		list.insert(1);

		DoublyLinkedList::Iterator it = list.getHead();

		(*it).score = 0;

		//EXPECT_FALSE(*it);
	}

	//  ID: 2
	//  テスト項目: ConstIteratorから取得した要素に対して、値の代入が行えないかをチェック
	//  想定する戻り値: 

	//  ID: 3
	//  テスト項目: リストが空の際の、先頭イテレータに対して呼び出した際の挙動
	//  想定する戻り値: 

	//  ID: 4
	//  テスト項目: 末尾イテレータに対して呼び出した際の挙動
	//  想定する戻り値: 

	//================================ イテレータをリストの末尾に向かって一つ進める ================

	//  ID: 5
	//  テスト項目: リストの参照がない状態で呼び出した際の挙動
	//  想定する戻り値: 

	//  ID: 6
	//  テスト項目: リストが空の際の、先頭イテレータに対して呼び出した際の挙動
	//  想定する戻り値: 

	//  ID: 7
	//  テスト項目: 末尾イテレータに対して呼び出した際の挙動
	//  想定する戻り値: 

	//  ID: 8
	//  テスト項目: リストに二つ以上の要素がある場合に呼び出した際の挙動
	//  想定する戻り値: 

	//  ID: 9
	//  テスト項目: 前置インクリメントを行った際の挙動( ++演算子オーバーロードで実装した場合 )
	//　想定する戻り値:

	//  ID: 10
	//  テスト項目: 後置インクリメントを行った際の挙動( ++演算子オーバーロードで実装した場合 )
	//  想定する戻り値:


	//============================== イテレータをリストの先頭に向かって一つ進める ====================

	//  ID: 11
	//  テスト項目: リストの参照がない状態で呼び出した際の挙動
	//  想定する戻り値: 

	//  ID: 12
	//  テスト項目: リストが空の際の、末尾イテレータに対して呼び出した際の挙動
	//  想定する戻り値: 

	//  ID: 13
	//  テスト項目: 先頭イテレータに対して呼び出した際の挙動
	//  想定する戻り値: 

	//  ID: 14
	//  テスト項目: リストに二つ以上の要素がある場合に呼び出した際の挙動
	//  想定する戻り値:

	//  ID: 15
	//  テスト項目: 前置デクリメントを行った際の挙動( --演算子オーバーロードで実装した場合 )
	//  想定する戻り値: 

	//  ID: 16
	//  テスト項目: 後置デクリメントを行った際の挙動( --演算子オーバーロードで実装した場合 )
	//  想定する戻り値: 


	//=================================== イテレータのコピーを行う ===================================

	//  ID: 17
	//  テスト項目: ConstIteratorから、Iteratorのコピーが作成されないかをチェック
	//  想定する戻り値: 

	//  ID: 18
	//  テスト項目: コピーコンストラクト後の値がコピー元と等しいことをチェック
	//  想定する戻り値: 


	//=================================== イテレータの代入を行う ===================================

	//  ID: 19
	//  テスト項目: IteratorにConstIteratorを代入できない事をチェック
	//  想定する戻り値:

	//  ID: 20
	//  テスト項目: 代入後の値がコピー元と等しいことをチェック
	//  想定する戻り値: 


	//=========================== 二つのイテレータが同一のものであるか、比較を行う=========================

	//  ID: 21
	//  テスト項目: リストが空の状態での先頭イテレータと末尾イテレータを比較した際の挙動をチェック
	//  想定する戻り値: 

	//  ID: 22
	//  テスト項目: 同一のイテレータを比較した際の挙動
	//  想定する戻り値: 

	//  ID: 23
	//  テスト項目: 異なるイテレータを比較した際の挙動
	//  想定する戻り値: 


	//============================== 二つのイテレータが異なるものであるか、比較を行う=============

	//  ID: 24
	//  テスト項目: リストが空の状態での先頭イテレータと末尾イテレータを比較した際の挙動をチェック
	//  想定する戻り値:

	//  ID: 25
	//  テスト項目: 同一のイテレータを比較した際の挙動
	//  想定する戻り値: 

	//  ID: 26
	//  テスト項目: 異なるイテレータを比較した際の挙動
	//  想定する戻り値: 

	//=================================================================================================
}